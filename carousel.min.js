var lWrapper = "carousel-list-wrapper", listCls = "carousel-list", selectedList = "carousel-list-selected", wrapper = "carousel-item-wrapper", selected = "carousel-item-selected", itemCls = "carousel-item", hovering = "carousel-item-hover"; function setListAndItems(listDest, itemDest, items) { this.setMenu(listDest, items), this.setItems(itemDest, items) } function setItems(destEl, items, parent) { if (Array.isArray(items)) { for (var selectedExists, i = 0; items.length > i; i++)items[i].hasOwnProperty("uid") || getUID(items[i]); if (destEl instanceof HTMLCollection && (destEl = destEl.item(0)), !(destEl instanceof HTMLElement)) return console.warn("Warning: please provide setItems with a valid destination element!"); destEl.childNodes.forEach(function (node) { if (node.className) return !!node.className.includes(selected) && (selectedExists = !0) }), items.forEach(function (item, idx) { void 0 === parent && (parent = !0); var el = document.createElement(item.element || "div"); !0 === parent && (!selectedExists && idx <= 0 && (el.className += " " + selected + " "), el.className += itemCls, el.uid = item.uid), item.children && (Array.isArray(item.children) || console.warn("Please make sure the children property is an array"), setItems(el, item.children, !1)), item.class && ("string" != typeof item.class && console.warn("Please ensure item.class is a string"), el.className += item.class), item.style && ("string" != typeof item.style && console.warn("Please ensure item.style is a string"), el.style.cssText = item.style), item.text && ("string" != typeof item.text && console.warn("Please ensure item.text is a string"), el.innerHTML = item.text), destEl.appendChild(el) }), setItemListeners(destEl) } } function setMenu(destEl, items, parent) { if (Array.isArray(items)) { for (var selectedExists, i = 0; items.length > i; i++)items[i].hasOwnProperty("uid") || getUID(items[i]); if (destEl instanceof HTMLCollection && (destEl = destEl.item(0)), !(destEl instanceof HTMLElement)) return console.warn("Warning: please provide setMenu with a valid destination element!"); destEl.childNodes.forEach(function (node) { if (node.className) return !!node.className.includes(selectedList) && (selectedExists = !0) }), items.forEach(function (item, idx) { var textTitle = document.createTextNode(item.li || "item"), listEl = document.createElement("li"), titleEl = document.createElement("p"); void 0 === parent && (parent = !0), !0 === parent && !selectedExists && idx <= 0 && (listEl.className += " " + selectedList + " "), titleEl.appendChild(textTitle), listEl.appendChild(titleEl), listEl.uid = item.uid, listEl.className += listCls, destEl.appendChild(listEl) }), setListListeners(destEl) } } function setItemListeners(destEl) { if (destEl instanceof HTMLElement) { if (destEl.childNodes && (destEl = destEl.childNodes), !(destEl instanceof NodeList)) return console.warn("Warning Element provided does not have a nodelist!"); destEl.forEach(function (el) { el.className && !el.className.includes(itemCls) || (el.addEventListener("mouseenter", onEnter, !1), el.addEventListener("mouseleave", onLeave, !1), el.addEventListener("click", onClick, !1)) }) } } function setListListeners(destEl) { if (destEl instanceof HTMLElement) { if (destEl.childNodes && (destEl = destEl.childNodes), !(destEl instanceof NodeList)) return console.warn("Warning Element provided does not have a nodelist!"); destEl.forEach(function (el) { el.className && !el.className.includes(listCls) || el.addEventListener("click", onClick, !1) }) } } function onEnter() { this.classList.add(hovering) } function onLeave() { this.classList.remove(hovering) } function onClick() { var ELItemWrapper = document.getElementsByClassName(wrapper), ELListWrapper = document.getElementsByClassName(lWrapper), ELItemSelected = document.getElementsByClassName(selected), ELlistSelected = document.getElementsByClassName(selectedList); if (this.className.includes(listCls) && !this.className.includes(selectedList)) { var carouselChildren = ELItemWrapper[0].childNodes, self = this; return ELlistSelected[0].classList.remove(selectedList), this.classList.add(selectedList), carouselChildren.forEach(function (child) { if (void 0 !== self.uid && child.uid === self.uid) return ELItemSelected[0].classList.remove(selected), child.classList.add(selected) }) } if (this.className.includes(itemCls) && !this.className.includes(selected)) { var carouselChildren2 = ELListWrapper[0].childNodes, self = this; return ELItemSelected[0].classList.remove(selected), this.classList.add(selected), carouselChildren2.forEach(function (child) { if (void 0 !== self.uid && child.uid === self.uid) return ELlistSelected[0].classList.remove(selectedList), child.classList.add(selectedList) }) } } function getUID(item) { return item.uid = Math.floor(Math.random() * Date.now()) }